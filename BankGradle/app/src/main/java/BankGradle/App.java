/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package BankGradle;

import com.google.api.core.ApiFuture;
import com.google.auth.oauth2.GoogleCredentials;
import com.google.cloud.firestore.DocumentReference;
import com.google.cloud.firestore.DocumentSnapshot;
import com.google.cloud.firestore.Firestore;
import com.google.cloud.firestore.WriteResult;

import com.google.firebase.FirebaseApp;
import com.google.firebase.FirebaseOptions;
import com.google.firebase.cloud.FirestoreClient;
import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ExecutionException;

    class userInfo {
    static String username;
    static String password;
    static String balance;
    static String accn;
    }
public class App {
    public static void createAccount(Map<String, Object> users, DocumentReference doc){
        String username = userInfo.username;
        String password = userInfo.password;
        String accountNumber = userInfo.accn;
        ArrayList<String> newUser = new ArrayList<>();
        newUser.add(password);
        newUser.add("0");
        newUser.add(accountNumber);
        users.put(username, newUser);
        users.put("newestAccn", (Integer.valueOf(String.valueOf(users.get("newestAccn"))) + 1));
        updateDoc(doc, users);
    }
    public static void print(Object value){
        System.out.println(String.valueOf(value));
    }
    public static void transactionHistoryFormat(String to, String amnt, Timestamp tstmp, String type) {
    	String formattedamount = null;
    	if(type == "give") {
    		formattedamount = "-" + amnt;
    	}
    	if(type == "get") {
    		formattedamount = "+" + amnt;
    	}
    	System.out.println(tstmp.toString().split("T")[0] + " - " + formattedamount + " - " + to);
    }
    public static void transactionHistory(String username, Map users) {
    	ArrayList usr = (ArrayList) users.get(username);
    	try {
    	HashMap usrdat = (HashMap) usr.get(3);
    	ArrayList userdata = (ArrayList) usrdat.get("transactionHistory");
    	HashMap userhashmap = (HashMap) userdata.get(0);
    	
    	userhashmap.forEach((key, value) -> {
    		HashMap hash = (HashMap) (HashMap) value;
    		Timestamp tstmp = (Timestamp) ((HashMap) value).get("timestamp");
    		String amnt = (String) ((HashMap) value).get("ammount");
    		String to = (String) ((HashMap) value).get("to");
    		String type = (String) ((HashMap) value).get("type");
    		transactionHistoryFormat(to, amnt, tstmp, type);
    	});
    	} catch(Exception IndexOutOfBoundsException) {
    		System.out.println("You have no past transactions to show.");
    	}
    }
    public static void getDoc(Firestore db, String path) throws InterruptedException, ExecutionException{
        String[] pathsplit = path.split("/");
        DocumentReference userAccounts = db.collection(pathsplit[0]).document(pathsplit[1]);
        ApiFuture<DocumentSnapshot> future = userAccounts.get();
        DocumentSnapshot document = future.get();
        Map<String, Object> users = document.getData();
    }
    public static void updateDoc(DocumentReference docRef, Map<String, Object> map){
        //asynchronously write data
        ApiFuture<WriteResult> result = docRef.set(map);
    }
    public static void transaction(String to, String from, String ammount, Firestore db, Map<String, Object> users) throws InterruptedException, ExecutionException{
        if(users.get(to) == null){
            print("That user does not exist");
            return;
        } else {
        	Map<String, Object> transaction = db.collection("transaction").document(userInfo.username).get().get().getData();
        	ArrayList<String> newTransaction = new ArrayList<>();
        	newTransaction.add(from);
        	newTransaction.add(to);
        	newTransaction.add(ammount);
        	newTransaction.add(String.valueOf((new Date()).getTime()));
        	transaction.put("transaction", newTransaction);
        	updateDoc(db.collection("transactions").document(String.valueOf((new Date()).getTime())), transaction);
        	// make the transactionhistory item to conform with both the transactionhistory function and the database.
        	Map fromusermap = (Map) users.get(from);
        	try {
            	HashMap fromdat = (HashMap) fromusermap.get(3);
            	ArrayList fromdata = (ArrayList) fromdat.get("transactionHistory");
            	HashMap fromhashmap = new HashMap();
            	} catch(Exception IndexOutOfBoundsException) {
            		ArrayList fromdata = new ArrayList();
            		fromusermap.put("transactionHistory", fromdata);
            	}
        }
    }
    public static void main(String[] args) throws IOException, InterruptedException, ExecutionException {
        // Use the application default credentials
FileInputStream serviceAccount =
  new FileInputStream("name.json");

FirebaseOptions options = new FirebaseOptions.Builder()
  .setCredentials(GoogleCredentials.fromStream(serviceAccount))
  .build();
FirebaseApp.initializeApp(options);

Firestore db = FirestoreClient.getFirestore();
DocumentReference userAccounts = db.collection("UserAccounts").document("users");
ApiFuture<DocumentSnapshot> future = userAccounts.get();
DocumentSnapshot document = future.get();
Map<String, Object> users = document.getData();
//This is where the actual app starts
System.out.println("Welcome to the Bank of Waste.");
String password = null;
    InputStreamReader reader = new InputStreamReader(System.in);
        BufferedReader input = new BufferedReader(reader);
        //Scanner scanner = new Scanner(System.in);
        System.out.println("Enter your username");
        System.out.print("> ");
        String username;
        username = input.readLine();
        userInfo.username = username.toLowerCase();
        if(users == null ? username == null : users.get(username) == null){
            System.out.println("No account exists with that username. Would you like to make one?");
            System.out.print("Yes or No> ");
            boolean create;
            String createstring = input.readLine();
            if(createstring.equalsIgnoreCase("yes")) {
            create = true;
            } else {
            create = false;
            }
            if(create){
                userInfo.username = username;
                System.out.print("What do you want your password to be?> ");
                password = input.readLine();
                userInfo.password = password;
                int accnminone = Integer.valueOf((String.valueOf(users.get("newestAccn"))));
                int newaccn = accnminone + 1;
                userInfo.accn = String.valueOf(newaccn);
                createAccount(users, userAccounts);
            }
        } else {
        
        System.out.println("Please enter the password for the account associated with " + userInfo.username);
        System.out.print("> ");
        password = input.readLine();
        }
        getDoc(db, "UserAccounts/users");
        ArrayList userData = (ArrayList) users.get(username);
        
        int x = 1;
        for(var name : userData){        
        if(x == 1){
            userInfo.password = (String) name;
            x++;
        }
        else if(x == 2){
            userInfo.balance = (String) name;
            x++;
        }
        else if(x == 3){
            userInfo.accn = (String) name;
            x++;
        }
    };
        if(password == null ? userInfo.password == null : password.equals(userInfo.password)){
        } else {
            System.out.println("Incorrect Password.");
            return;
        }
        System.out.println("Hello " + userInfo.username);
        System.out.println();
        System.out.println("Would you like to:");
        System.out.println("Check balance");
        print("Make a transfer");
        print("Check transfer log");
        String ans = input.readLine();
        if(ans.toLowerCase().contains("balance")) {
        System.out.println("$" + userInfo.balance);
        }
        if(ans.toLowerCase().contains("transaction")) {
        	System.out.print("Who would you like to send the message to?> ");
        	String to = input.readLine();
        	System.out.print("How much would you like to send?");
        	String ammount = input.readLine();
        	transaction(to, userInfo.username, ammount, db, users);
        }
        if(ans.toLowerCase().contains("history") || ans.toLowerCase().contains("transactions")) {
        	transactionHistory(userInfo.username, users);
        }
    }
}
